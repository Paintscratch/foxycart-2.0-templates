<!DOCTYPE html>
<html id="fc" lang={{ language_iso_code }}>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <title>{{ config.store_name }} Secure Checkout</title>

    <meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui">

    {% for css_file_href in config.css_files %}
        <link href="{{ css_file_href }}" rel="stylesheet" media="screen">
    {% endfor %}

    <link rel="stylesheet"
          href="{{ config.template_config.custom_config.ps_domain }}/shop/foxycart_templates/styles/ps-foxycart-styles.css">

    {{ fc_header_content|raw }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css"/>
</head>
<body class="ps-foxy">
{% include 'svg.inc.twig' %}
<div class="fc-container ps-logo-container">
    <img id="fc-logo" src="{{ config.cache_path }}{{ config.store_logo_url }}" class="fc-logo__image"
         alt="{{ store_name }}">
    <h1 class="fc-checkout-title">Secure Checkout</h1>
</div>

{% import "utils.inc.twig" as utils %}
{% embed 'checkout.inc.twig' %}
    {# You can override blocks within checkout.inc.twig here if needed #}
    {# For example, to ensure the fc-cancel-continue-shopping div has a unique ID or a link with an ID if it doesn't already: #}
    {# {% block block_name_containing_cancel_link %}
            <div class="fc-cancel-continue-shopping">
                <a href="{{ cart_cancel_and_continue_link }}" id="ps-cancel-checkout-link" class="fc-button fc-button--minor fc-button--cancel">
                    <span class="fc-icon">
                        <svg class="fc-svg-icon fc-svg-icon--angle-double-left" aria-hidden="true" role="img" focusable="false"> <use xlink:href="#fc-icon-angle-double-left"></use> </svg>
                    </span>
                    <span>{{ lang.cart_continue_shopping }}</span>
                </a>
            </div>
        {% endblock %} #}
    {% block logo %}
    {% endblock %}


{% endembed %}

<div id="ps-confirm-cancel-modal" class="modal">
    <h5>Leave checkout to edit your cart?</h5>
    <div class="modal-buttons">
        <a href="#" id="ps-confirm-cancel-no" class="btn btn-primary">Continue checkout</a>
        <a href="#" id="ps-confirm-cancel-yes" class="btn btn-default">Edit my cart</a>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>

{% include template_from_string(fc_footer_content) %}
{% set warning_threshold = config.template_config.custom_config.fraud_amount_threshold %}
<script>
    (function ($, FC) {
        "use strict";

        // 1) High-value billing warning
        function checkBillingAddressWarning() {
            if (!FC.json || !FC.json.total_order) return;
            var threshold = {{ warning_threshold }};
            var useDifferent = $('#use_different_addresses').is(':checked');
            var total = FC.json.total_order;
            var $container = $('#billing-address-warning-container');

            // inject container if missing
            if (!$container.length) {
                $container = $('<div id="billing-address-warning-container" style="display:none"></div>');
                var $billingFs = $('fieldset[data-fc-id="billing_address"]');
                if ($billingFs.length) {
                    $billingFs.before($container);
                } else {
                    $('#use_different_addresses').closest('label').after($container);
                }
            }

            // show or hide warning
            if (useDifferent && total > threshold) {
                var msg = ''
                    + '<div class="fc-alert fc-alert--warning" role="alert">'
                    + '<p style="margin:0;">'
                    + 'Use PayPal, Amazon Pay, or Apple Pay for different billing/shipping addresses. '
                    + 'Credit cards may require additional verification.'
                    + '</p>'
                    + '</div>';
                if (!$container.is(':visible')) {
                    $container.html(msg).slideDown('fast');
                }
            } else if ($container.is(':visible')) {
                $container.slideUp('fast', function () {
                    $(this).empty();
                });
            }
        }

        // 2) Fire on FoxyCart load
        FC.onLoad = function () {
            FC.client.on('ready.done', function () {
                // Capture the session ID and store it globally
                window.foxySessionId = FC.json.session_id || null;

                // A) Rename the “— or —” line
                $('.fc-action--payment--or').text('Express checkout');

                // B) Move express buttons above the email fieldset
                var $express = $('#fc-checkout__section--express-options');
                var $fieldset = $('#fc-checkout__section--email fieldset#fc-email');
                if ($express.length && $fieldset.length) {
                    $express.insertBefore($fieldset);
                    setTimeout(function () {
                        $express.addClass('positioned');
                        // inject divider right below the express block
                        var $divider = $(
                            '<div class="fc-divider">' +
                            '<span class="fc-divider__line"></span>' +
                            '<span class="fc-divider__text">OR</span>' +
                            '<span class="fc-divider__line"></span>' +
                            '</div>'
                        );
                        if (!$express.next().is('.fc-divider')) {
                            $express.after($divider);
                        }
                    }, 10);
                } else {
                    console.warn('Express options or email fieldset not found');
                }

                // C) Initial billing warning + listen for address changes
                checkBillingAddressWarning();
                $(document).on('change', '#use_different_addresses', function () {
                    setTimeout(checkBillingAddressWarning, 100);
                });

                // D) “Cancel” modal logic
                if (!$.modal) {
                    console.error('jQuery Modal not loaded; cancel modal won’t work.');
                } else {
                    // pick the built-in cancel link by its cancel-button class
                    var $cancelLink = $('a.fc-button--cancel');

                    if (!$cancelLink.length) {
                        console.error('Cancel-checkout link (fc-button--cancel) not found.');
                    } else {
                        // Open the dialog
                        $cancelLink.on('click', function (e) {
                            e.preventDefault();
                            $('#ps-confirm-cancel-modal').modal();
                        });

                        // “No, continue checkout” inside the modal just closes it
                        $('#ps-confirm-cancel-no').on('click', function (e) {
                            e.preventDefault();
                            $.modal.close();
                        });

                        // “Yes, edit my cart” does the navigation then hides
                        $('#ps-confirm-cancel-yes').on('click', function (e) {
                            e.preventDefault();
                            // close the modal cleanly
                            $.modal.close();

                            // Build cart URL with session preservation
                            var cartUrl = '{{ config.template_config.custom_config.ps_domain }}/cgi-bin/shopping-cart.cgi';
                            if (window.foxySessionId) {
                                cartUrl += '?fcsid=' + encodeURIComponent(window.foxySessionId);
                            }

                            // send them straight to your cart URL
                            window.location.href = cartUrl;                        });
                    }
                }

                // =============================================
                // E) HIDE AMAZON PAY MICRO-TEXT (NEW CODE)
                // =============================================
                function hideAmazonMicroText() {
                    // 1. Find the host element that contains the Shadow DOM
                    const amazonButtonHost = document.querySelector('#amazon-pay-button');

                    // 2. Check if the host and its shadowRoot exist
                    if (amazonButtonHost && amazonButtonHost.shadowRoot) {
                        // 3. Query *inside* the Shadow DOM for the element to hide
                        const microtextView = amazonButtonHost.shadowRoot.querySelector('.amazonpay-button-view3');

                        // 4. If the element is found and is not already hidden, hide it.
                        if (microtextView && microtextView.style.display !== 'none') {
                            microtextView.style.display = 'none';
                        }
                    }
                }

                // Create an observer to watch for when the Amazon button is added to the page
                const observer = new MutationObserver(function () {
                    // When any change happens on the page, try to run our function
                    hideAmazonMicroText();
                });

                // Start observing the main checkout container for any additions/changes
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });

                // Run the function once on initial load just in case
                hideAmazonMicroText();
            });

            // F) Also re-check billing warning on cart updates
            FC.client.on('cart-update', checkBillingAddressWarning);

            // MOBILE: class-toggle collapse of only the items block
            if ( window.matchMedia('(max-width:767px)').matches ) {
                var $wrap   = $('#fc-cart--fixed-width');
                var $toggle = $('#ps-toggle-products');

                $toggle.on('click', function(){
                    $wrap.toggleClass('expanded');
                    var txt = $wrap.hasClass('expanded')
                        ? 'Hide items'
                        : 'Review items';

                    // Update text content only, not the entire button
                    $(this).find('.toggle-text').text(txt);

                    // Toggle the expanded class on the button for chevron rotation
                    $(this).toggleClass('expanded');
                });
            }

        };

    })(jQuery, FC);
</script>
</body>
</html>